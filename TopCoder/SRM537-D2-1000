/*
     the idea is simple, as long as there are no cycles in the graph, we can optain a value for i
     all we have to do is calculate the depth of i in its component
     due to linearity of expectation,  expectation of sums = sum of expectations
     the ith index could be included in depth!
     add up all the values and return them 
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
//#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-9)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

class PrinceXToastbook
{
public:
	double eat(vector<int> prerequisite)
	{
		double ret = 0;
		rep(i, 0, sz(prerequisite))
		{
			int c = i, depth = 1;
			while(depth < 100)
			{
				c = prerequisite[c];
				if (c == -1) break;
				depth++;
			}
			if (depth < 100)
			{
				double hoba = 1.;
				erep(i, 1, depth) hoba *= i;
				ret += (1. / hoba);
			}
		}
		return ret;
	}
};
