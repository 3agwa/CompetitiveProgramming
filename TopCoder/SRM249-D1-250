/*
    we'll keep a mask that indicates the currently taken tables
    for each possible size, get the number of ways we could sit people of that size
    a group of size K needs K tables next to each other
    now, for each valid place of sitting, turn on those bits and recurse solving the problem with the newely updated mask
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-9)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

vi probs;
int numTables;
double dp[1 << 15];
class TableSeating
{

public:

	int Ways(int mask, int k)
	{
		int flag = 0, count = 0;
		rep(i, 0, numTables)
		{
			flag = 0;
			rep(j, i, min(i+k, numTables))
			{
				if ((mask & (1 << j)))
					break;
				else
					flag++;
			}

			if (flag == k)
				count++;
		}
		return count;
	}

	bool ok(int mask, int start, int k)
	{
		int count = 0;
		rep(i, start, min(start+k, numTables))
		{
			if ((mask & (1 << i)))
				break;
			else
				count++;
		}
		return (count == k);
	}

	int getMask(int mask, int start, int k)
	{

		int newMask = mask;
		rep(i, start, start + k)
			newMask |= 1 << i;

		return newMask;

	}

	double solve(int mask)
	{

		if (mask == (1 << numTables) - 1)
			return 0.0;

		if (dp[mask] != -1.0)
			return dp[mask];

		double expect = 0.0;

		erep(i, 1, sz(probs))
		{

			if (i > numTables)
				break;

			int ways = Ways(mask, i);
			if (!probs[i - 1] || !ways)
				continue;

			double p = probs[i - 1] / 100.0;

			rep(j, 0, numTables)
				if (ok(mask, j, i))
					expect += p * (1. / (double)(ways))
							* (i + solve(getMask(mask, j, i)));
		}

		return dp[mask] = expect;

	}

	double getExpected(int numTables, vector<int> probs)
	{
		// global
		::probs = probs;
		::numTables = numTables;

		for (int i = 0; i < (1 << 15); i++)
			dp[i] = -1.0;

		return solve(0);

	}

};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector<int> p1, bool hasAnswer,
		double p2)
{
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i)
	{
		if (i > 0)
		{
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	TableSeating *obj;
	double answer;
	obj = new TableSeating();
	clock_t startTime = clock();
	answer = obj->getExpected(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer)
	{
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer)
	{
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res)
	{
		cout << "DOESN'T MATCH!!!!" << endl;
	}
	else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
	{
		cout << "FAIL the timeout" << endl;
		res = false;
	}
	else if (hasAnswer)
	{
		cout << "Match :-)" << endl;
	}
	else
	{
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main()
{
	bool all_right;
	all_right = true;

	int p0;
	vector<int> p1;
	double p2;

	{
		// ----- test 0 -----
		p0 = 4;
		int t1[] =
		{ 100 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 4.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 4;
		int t1[] =
		{ 0, 100 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 3.3333333333333335;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 5;
		int t1[] =
		{ 0, 0, 0, 0, 0, 50, 50 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 0.0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 12;
		int t1[] =
		{ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 7.871087929710551;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right)
	{
		cout << "You're a stud (at least on the example cases)!" << endl;
	}
	else
	{
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
