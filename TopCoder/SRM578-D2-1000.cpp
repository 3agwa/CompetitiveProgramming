#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

class WolfInZooDivTwo
{
public:
    int modulo = 1000000007, n;
    ll memo[301][301];
    int visited[301];
    vi temp;
    vii vec;
    ll solve(int i, int j)
    {
        rep(a, 0, sz(vec))
        {
            if (i > vec[a].second)
            {
                bool hoba = false;
                erep(b, vec[a].first, vec[a].second)
                {
                    if (visited[b])
                    {
                        hoba = true;
                        break;
                    }
                }
                if (!hoba) return 0;
            }
        }
        if (i == n) return 1;
        if (memo[i][j] != -1) return memo[i][j];


        ll ret = 0;
        ret += solve(i+1, j);
        visited[i] = true;
        ret += solve(i+1, i);
        visited[i] = false;
        return memo[i][j] = ret%modulo;
    }

    int count(int N, vector <string> L, vector <string> R)
    {
        n = N;
        vec.clear();
        reset(visited, 0);
        reset(memo, -1);
        string x = "";
        string y = "";
        rep(i, 0, sz(L)) x += L[i];
        rep(i, 0, sz(R)) y += R[i];
        x += " ";
        y += " ";
        while(!x.empty())
        {
            int shemal = 0, yemeen = 0;
            string l = x.substr(0, x.find(" "));
            string r = y.substr(0, y.find(" "));
            x.erase(0, x.find(" ") + 1);
            y.erase(0, y.find(" ") + 1);
            rep(j, 0, sz(l)) shemal = shemal*10 + l[j] - 48;
            rep(j, 0, sz(r)) yemeen = yemeen*10 + r[j] - 48;
            vec.push_back({shemal, yemeen});
        }
        sort(all(vec));
        return solve(0, 300);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WolfInZooDivTwo *obj;
	int answer;
	obj = new WolfInZooDivTwo();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <string> p1;
	vector <string> p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 5;
	string t1[] = {"0 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"2 4"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 27;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 10;
	string t1[] = {"0 4 2 7"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"3 9 5 9"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 798;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 100;
	string t1[] = {"0 2 2 7 10 1","3 16 22 30 33 38"," 42 44 49 51 57 60 62"," 65 69 72 74 77 7","8 81 84 88 91 93 96"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"41 5 13 22 12 13 ","33 41 80 47 40 ","4","8 96 57 66 ","80 60 71 79"," 70 77 ","99"," 83 85 93 88 89 97 97 98"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 250671525;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 3;
	string t1[] = {"1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"2"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
