#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-6)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}


class ColorCode {
public:
	long long getOhms(vector <string> code) {
		ll sum = 0;
		if (code[0] == "black") sum = sum*10 + 0;
		if (code[0] == "brown") sum = sum*10 + 1;
		if (code[0] == "red") sum = sum*10 + 2;
		if (code[0] == "orange") sum = sum*10 + 3;
		if (code[0] == "yellow") sum = sum*10 + 4;
		if (code[0] == "green") sum = sum*10 + 5;
		if (code[0] == "blue") sum = sum*10 + 6;
		if (code[0] == "violet") sum = sum*10 + 7;
		if (code[0] == "grey") sum = sum*10 + 8;
		if (code[0] == "white") sum = sum*10 + 9;

		if (code[1] == "black") sum = sum*10 + 0;
		if (code[1] == "brown") sum = sum*10 + 1;
		if (code[1] == "red") sum = sum*10 + 2;
		if (code[1] == "orange") sum = sum*10 + 3;
		if (code[1] == "yellow") sum = sum*10 + 4;
		if (code[1] == "green") sum = sum*10 + 5;
		if (code[1] == "blue") sum = sum*10 + 6;
		if (code[1] == "violet") sum = sum*10 + 7;
		if (code[1] == "grey") sum = sum*10 + 8;
		if (code[1] == "white") sum = sum*10 + 9;

		if (code[2] == "black") sum*= powl(10, 0);
		if (code[2] == "brown") sum*= powl(10, 1);
		if (code[2] == "red") sum*= powl(10, 2);
		if (code[2] == "orange") sum*= powl(10, 3);
		if (code[2] == "yellow") sum*= powl(10, 4);
		if (code[2] == "green") sum*= powl(10, 5);
		if (code[2] == "blue") sum*= powl(10, 6);
		if (code[2] == "violet") sum*= powl(10, 7);
		if (code[2] == "grey") sum*= powl(10, 8);
		if (code[2] == "white") sum*= powl(10, 9);
		return sum;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ColorCode *obj;
	long long answer;
	obj = new ColorCode();
	clock_t startTime = clock();
	answer = obj->getOhms(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	long long p1;

	{
	// ----- test 0 -----
	string t0[] = {"yellow","violet","red"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4700ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"orange","red","blue"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 32000000ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"white","white","white"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 99000000000ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

