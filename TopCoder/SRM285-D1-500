/*
  simulate the process by moving steps = sz(program)
  minimize the steps taken with 50,000
  return immediately when stepping out of boundaries
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-9)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

string x;

int memo[1001][1001], n, nn;

bool valid(int i, int j) { return (i >= 0 && j >= 0 && i < nn && j < nn);}

int solve(int xx ,int yy)
{
	if (memo[xx][yy] != -1) return memo[xx][yy];
	int a = xx, b = yy;
	rep(i, 0, n)
	{
		if (x[i] == 'U') b++;
		if (x[i] == 'D') b--;
		if (x[i] == 'L') a--;
		if (x[i] == 'R') a++;
		if (!valid(a, b)) return memo[xx][yy] = 1 + i;
	}
	if (a == xx && b == yy) return memo[xx][yy] = 50000;
	int ret = min(50000, n + solve(a, b));
	return memo[xx][yy] = ret;
}

class RobotTesting
{
public:
	double estimateCommands(int N, string program)
	{
		reset(memo, -1);
		x = program;
		double ret = 0;
		n = sz(program), nn = N;
		rep(i, 0, N) rep(j, 0, N) ret += solve(i, j);
		return ret / (N*N*1.);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	RobotTesting *obj;
	double answer;
	obj = new RobotTesting();
	clock_t startTime = clock();
	answer = obj->estimateCommands(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	string p1;
	double p2;

	{
	// ----- test 0 -----
	p0 = 2;
	p1 = "L";
	p2 = 1.5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = "LURD";
	p2 = 12501.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 4;
	p1 = "LDLDLDRRR";
	p2 = 3.375;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 29;
	p1 = "RRULDD";
	p2 = 53.236623067776456;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 697;
	p1 = "LLLLLDRRRRR";
	p2 = 3806.5179340028694;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
