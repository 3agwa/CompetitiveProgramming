/*
    simulate the process using bfs
    no need to make a visited map, states are distinct
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
//#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

class PowerOfThreeEasy
{
public:
	string ableToGet(int x, int y)
	{
		vll vec;
		erep(i, 0, 20) vec.push_back(powl(3, i));

		queue< pair< pii, int> > Q;
		Q.push(
				{
					{	0, 0}, 0});
		while(!Q.empty())
		{
			int xx = Q.front().first.first;
			int yy = Q.front().first.second;
			int level = Q.front().second;
			Q.pop();
			if (xx == x && yy == y) return "Possible";
			if (xx > x || yy > y) continue;
			if (level > 19) return "Impossible";
			
				Q.push({{xx + vec[level], yy}, level + 1});
							Q.push({{xx, yy + vec[level]}, level + 1});
		}
		return "Impossible";
	}
};
