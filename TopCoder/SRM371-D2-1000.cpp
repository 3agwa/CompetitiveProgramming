#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

char arr[1001][1001];
bool visited[1001][1001];
int n, m;
bool inside(int i, int j) {return(i>= 0 && j>=0 && i<n && j<m);}

int dx[] = {0, 0, 1, -1};
int dy[] = {-1, 1, 0, 0};
int sum;

void flood(int i, int j)
{
    if (visited[i][j]) return;
    sum++;
    visited[i][j] = true;
    rep(a, 0, 4)
    {
        if (inside(i + dx[a], j + dy[a]) && !visited[i+dx[a]][j+dy[a]] && (arr[i + dx[a]][j + dy[a]] >= arr[i][j]))
        {
            flood(i+dx[a], j + dy[a]);
        }
    }
}


bool cmp(vi a, vi b)
{
    return sz(a) > sz(b);
}

class FloodRelief
{
public:
    int minimumPumps(vector <string> heights)
    {
        m = sz(heights[0]);
        n = sz(heights);
        reset(visited, false);
        rep(i, 0, sz(heights))
        {
            rep(j, 0, sz(heights[i]))
            {
                arr[i][j] = heights[i][j];
            }
        }

        vector< pair< int, pii > > vec;
        rep(i, 0, n)
        {
            rep(j, 0, m)
            {
                sum = 0;
                reset(visited, false);
                flood(i, j);
                cout << sum << endl;
                vec.push_back(mp(sum, i, j));
            }
        }
        sort(vec.rbegin(), vec.rend());
        int helahoba = 0;
        reset(visited, 0);
        rep(i, 0, sz(vec))
        {
            int x = vec[i].second.first, y = vec[i].second.second;
            if (!visited[x][y])
            {
                helahoba++;
                flood(x, y);
            }
        }

        return helahoba;
    } //
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FloodRelief *obj;
	int answer;
	obj = new FloodRelief();
	clock_t startTime = clock();
	answer = obj->minimumPumps(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"ccccc","cbbbc","cbabc","cbbbc","ccccc"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"cbabcbabc","cbabcbabc","cbabcbabc","cbabcbabc"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"ccccccccccc","caaaaaaaaac","caaaaaaaaac","caazpppzaac","caapdddpaac","caapdddpaac","caapdddpaac","caazpppzaac","caaaaaaaaac","caaaaaaaaac","ccccccccccc"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"ab","ba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
