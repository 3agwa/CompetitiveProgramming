/*
    the idea is to calculate the money i'll gain and the money the company will gain
    i'll gain the money iff i won, this means the rest lost
    if the total collected money for the company is less than minimum money, we return -2
    if our total money won is 0, return -2.0
    otherwise return the needed ratio
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
//#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-9)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

class RaceManagement
{
public:
	double getPayoutFactor(vector<int> probability, vector<int> amounts,
			int minimumMoney)
	{
		vd prob;
		rep(i, 0, sz(probability))
		{
			double p = probability[i] / 100.;
			rep(j, 0, sz(probability))
			{
				if (i == j) continue;
				p *= (100. - probability[j]) / (100.);
			}
			prob.push_back(p);
		}
		double a = 0, b = 0;
		rep(i, 0, sz(amounts))
		{
			a += (double)amounts[i] * prob[i];
			b += (1. - prob[i]) * (amounts[i]);
		}
		if (b < minimumMoney) return -1.0;
		if (a == 0) return -2.0;
		return (b - minimumMoney*1.) / a;
	}
};


