#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}


class WordCompositionGame
{
public:
    string score(vector <string> listA, vector <string> listB, vector <string> listC)
    {
        int s1 = 0, s2 = 0, s3 = 0;
        rep(i, 0, sz(listA))
        {
            int cnt = 0;
            rep(j, 0, sz(listB))
            {
                if (listB[j] == listA[i])
                {
                    cnt++;
                    break;
                }
            }

            rep(j, 0, sz(listC))
            {
                if (listC[j] == listA[i])
                {
                    cnt++;
                    break;
                }
            }
            if (!cnt) s1 += 3;
            else if (cnt == 1) s1 += 2;
            else s1++;
        }

        rep(i, 0, sz(listB))
        {
            int cnt = 0;
            rep(j, 0, sz(listA))
            {
                if (listA[j] == listB[i])
                {
                    cnt++;
                    break;
                }
            }

            rep(j, 0, sz(listC))
            {
                if (listC[j] == listB[i])
                {
                    cnt++;
                    break;
                }
            }
            if (!cnt) s2 += 3;
            else if (cnt == 1) s2 += 2;
            else s2++;
        }

        rep(i, 0, sz(listC))
        {
            int cnt = 0;
            rep(j, 0, sz(listB))
            {
                if (listB[j] == listC[i])
                {
                    cnt++;
                    break;
                }
            }

            rep(j, 0, sz(listA))
            {
                if (listA[j] == listC[i])
                {
                    cnt++;
                    break;
                }
            }
            if (!cnt) s3 += 3;
            else if (cnt == 1) s3 += 2;
            else s3++;
        }
        string x1 = "", x2 = "", x3 = "";
        while(s1)
        {
            x1 += (s1%10) + 48;
            s1/=10;
        }

        while(s2)
        {
            x2 += (s2%10) + 48;
            s2/=10;
        }

        while(s3)
        {
            x3 += (s3%10) + 48;
            s3/=10;
        }
        reverse(all(x1)), reverse(all(x2)), reverse(all(x3));
        return (x1+"/"+x2+"/"+x3);
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, string p3)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    WordCompositionGame *obj;
    string answer;
    obj = new WordCompositionGame();
    clock_t startTime = clock();
    answer = obj->score(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p3 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    vector <string> p2;
    string p3;

    {
        // ----- test 0 -----
        string t0[] = {"cat","dog","pig","mouse"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"cat","pig"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"dog","cat"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "8/3/3";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"mouse"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"cat","pig"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"dog","cat"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "3/5/5";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"dog","mouse"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"dog","pig"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"dog","cat"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "4/4/4";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"bcdbb","aaccd","dacbc","bcbda","cdedc","bbaaa","aecae"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"bcdbb","ddacb","aaccd","adcab","edbee","aecae","bcbda"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"dcaab","aadbe","bbaaa","ebeec","eaecb","bcbba","aecae","adcab","bcbda"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "14/14/21";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
