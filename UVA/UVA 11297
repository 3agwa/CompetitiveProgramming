/*
    it's a basic RMQ problem with an added twist
    we'll add another dimension as we'll need N segment trees to keep track of the values in each array
    update, query and build functions are the same, we'll just add the number of the segment tree in the functions
    
    when answering a query, get the RMQ over all [x1, x2] rows and minmize/maximize between them accordingly
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

const int MAX = 501;

int mx[MAX][4*MAX], mn[MAX][4*MAX], arr[MAX][MAX];

void build(int node, int st, int en, int id)
{
	if (st > en) return;

	if (st == en)
	{
		mn[id][node] = mx[id][node] = arr[id][st];
		return;
	}

	int mid = (st+en)/2;

	build(2*node, st, mid, id);
	build(2*node + 1, mid + 1, en, id);

	mx[id][node] = max(mx[id][2*node], mx[id][2*node + 1]);
	mn[id][node] = min(mn[id][2*node], mn[id][2*node + 1]);
}

void update(int node, int st, int en, int shemal, int yemeen, int val, int idx)
{
	if (st > en || st > yemeen || en < shemal) return;

	if (shemal <= st && en <= yemeen)
	{
		mx[idx][node] = mn[idx][node] = val;
		return;
	}

	int mid = (st+en)/2;
	update(2*node, st, mid, shemal, yemeen, val, idx);
	update(2*node + 1, mid + 1, en, shemal, yemeen, val, idx);

	mn[idx][node] = min(mn[idx][2*node], mn[idx][2*node + 1]);
	mx[idx][node] = max(mx[idx][2*node], mx[idx][2*node + 1]);
}

pii query(int node, int st, int en, int shemal, int yemeen, int idx)
{
	if (st > en || st > yemeen || en < shemal) return {-1e9, 1e9};

	if (shemal <= st && en <= yemeen) return {mx[idx][node], mn[idx][node]};

	int mid = (st+en)/2;

	pii a = query(2*node, st, mid, shemal, yemeen, idx);
	pii b = query(2*node + 1, mid + 1, en, shemal, yemeen, idx);

	return {max(a.first, b.first), min(a.second, b.second)};
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;

	rep(i, 0, n) rep(j, 0, n) cin >> arr[i][j];
	rep(i, 0, n) build(1, 0, n-1, i);

	int q;
	cin >> q;
	while(q--)
	{
		char c;
		cin >> c;
		if (c == 'q')
		{
			int x1, y1, x2, y2;
			cin >> x1 >> y1 >> x2 >> y2;
			x1--, x2--, y1--, y2--;
			pii ret = {-INT_MAX, INT_MAX};
			erep(i, x1, x2)
			{
				pii temp = query(1, 0, n-1, y1, y2, i);
				ret.first = max(ret.first, temp.first);
				ret.second = min(ret.second, temp.second);
			}
			cout << ret.first << " " << ret.second << endl;
		}
		else
		{
			int x, y, v;
			cin >> x >> y >> v;
			x--, y--;
			update(1, 0, n-1, y, y, v, x);
		}
	}

	return 0;
}

