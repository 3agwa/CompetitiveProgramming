/*
 *  Consider the input as a chess grid (black and white cells), we'll construct a network where all blacks
 *  are connected to the source and all whites are connected to the sink, flow from any black to white cell is INF
 *  The flow from src/sink to a cell will be the value of this cell, this is equivalent to having a[i][j] nodes
 *  The max flow will refer to the maximum value you can subtract two cells by 1
 */
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vvi;
typedef vector<pii> vii;
typedef vector<vector<pii> > vvii;
typedef long double ld;
typedef map<int, int> mapii;
typedef map<string, int> mapsi;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
//#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pi  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)

const int INF = 2000000000;

struct Edge
{
	int from, to, cap, flow, index;
	Edge(int from, int to, int cap, int flow, int index) :
			from(from), to(to), cap(cap), flow(flow), index(index)
	{
	}
};

struct Dinic
{
	int N;
	vector<vector<Edge> > G;
	vector<Edge *> dad;
	vector<int> Q;

	Dinic(int N) :
			N(N), G(N), dad(N), Q(N)
	{
	}

	void AddEdge(int from, int to, int cap)
	{
		G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
		if (from == to)
			G[from].back().index++;
		G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
	}

	long long BlockingFlow(int s, int t)
	{
		fill(dad.begin(), dad.end(), (Edge *) NULL);
		dad[s] = &G[0][0] - 1;

		int head = 0, tail = 0;
		Q[tail++] = s;
		while (head < tail)
		{
			int x = Q[head++];
			for (int i = 0; i < G[x].size(); i++)
			{
				Edge &e = G[x][i];
				if (!dad[e.to] && e.cap - e.flow > 0)
				{
					dad[e.to] = &G[x][i];
					Q[tail++] = e.to;
				}
			}
		}
		if (!dad[t])
			return 0;

		long long totflow = 0;
		for (int i = 0; i < G[t].size(); i++)
		{
			Edge *start = &G[G[t][i].to][G[t][i].index];
			int amt = INF;
			for (Edge *e = start; amt && e != dad[s]; e = dad[e->from])
			{
				if (!e)
				{
					amt = 0;
					break;
				}
				amt = min(amt, e->cap - e->flow);
			}
			if (amt == 0)
				continue;
			for (Edge *e = start; amt && e != dad[s]; e = dad[e->from])
			{
				e->flow += amt;
				G[e->to][e->index].flow -= amt;
			}
			totflow += amt;
		}
		return totflow;
	}

	long long GetMaxFlow(int s, int t)
	{
		long long totflow = 0;
		while (long long flow = BlockingFlow(s, t))
			totflow += flow;
		return totflow;
	}
};

int arr[51][51], n, m, id[51][51];
int dx[] =
{ 0, 0, 1, -1 };
int dy[] =
{ -1, 1, 0, 0 };

bool valid(int i, int j)
{
	return (i >= 0 && j >= 0 && i < n && j < m);
}

char col[51][51];

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int tc;
	cin >> tc;
	while (tc--)
	{
		reset(id, 0);
		cin >> n >> m;
		int x = 1, sum = 0;
		rep(i, 0, n)
		{
			char c = (i & 1) ? 'B' : 'W';
			rep(j, 0, m)
				cin >> arr[i][j], id[i][j] = x++, col[i][j] = c, c = (
						c == 'B' ? 'W' : 'B'), sum += arr[i][j];
		}

		Dinic flow(n * m + 2);
		int src = 0, sink = (n * m) + 1;
		rep(i, 0, n)
		{
			rep(j, 0, m)
			{
				if (col[i][j] == 'B')
					flow.AddEdge(id[i][j], sink, arr[i][j]);
				else
				{
					flow.AddEdge(src, id[i][j], arr[i][j]);
					rep(a, 0, 4)
					{
						int xx = i + dx[a], yy = j + dy[a];
						if (valid(xx, yy))
						{
							flow.AddEdge(id[i][j], id[xx][yy], INF);
						}
					}
				}
			}
		}
		cout << sum - flow.GetMaxFlow(src, sink) << endl;
	}

	return 0;
}
