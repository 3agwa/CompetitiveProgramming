/*
    build a segment tree containig both minimum value and its index
    query return the minimum in a range [l, r] including its index
    divide and conquer approach to search within the ranges of [0, n-1]
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

const int MAX = 100002;

ll arr[MAX];
int n;
pii tree[4*MAX];

void build(int node, int st, int en)
{
	if (st > en) return;

	if (st == en)
	{
		tree[node] = {arr[st], st};
		return;
	}

	int mid = (st+en)/2;

	build(2*node, st, mid);
	build(2*node + 1, mid + 1, en);

	tree[node] = min(tree[2*node], tree[2*node + 1]);
}

pii query(int node, int st, int en, int shemal, int yemeen)
{
	if (st > en || st > yemeen || en < shemal) return {2e9, -1};

	if (shemal <= st && en <= yemeen) return tree[node];

	int mid = (st+en)/2;

	pii a = query(2*node, st, mid, shemal, yemeen);
	pii b = query(2*node + 1, mid + 1, en, shemal, yemeen);

	return min(a, b);
}

ll solve(int st, int en)
{
	if (st > en) return 0;
	if (st == en) return arr[st];
	pii hoba = query(1, 0, n-1, st, en);
	ll ret = arr[hoba.second] * (en-st + 1LL);
	ret = max(ret, max(solve(st, hoba.second-1), solve(hoba.second+1, en)));
	return ret;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	while(cin >> n, n)
	{
		rep(i, 0, n) cin >> arr[i];
		build(1, 0, n-1);
		cout << solve(0, n-1) << endl;
	}

	return 0;
}

