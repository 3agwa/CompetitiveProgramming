/*
    we'll simulate the process of insertion, increasing and decreasing elements using segment tree
    our segment tree will keep track of the sum in different intervals
    we'll have to introduce another segment tree to keep track of the minimum values in a range
    to answer the query, we'll get the sum in [l, r] - minimum [l, r]
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

int arr[100001];
ll mn[400004];
ll sum[400004];

void build(int node, int st, int en)
{
	if (st > en) return;
	if (st == en)
	{
		mn[node] = arr[st];
		sum[node] = arr[st];
		return;
	}

	int mid = (st+en)/2;
	build(2*node, st, mid);
	build(2*node + 1, mid + 1, en);

	mn[node] = min(mn[2*node], mn[2*node + 1]);
	sum[node] = sum[2*node] + sum[2*node + 1];
}

// sum, mn
pair<ll, ll> query(int node, int st, int en, int shemal, int yemeen)
{
	if (st > en || st > yemeen || en < shemal) return {0, 1e18};

	if (shemal <= st && en <= yemeen) return {sum[node], mn[node]};

	int mid = (st+en) / 2;
	pair<ll, ll> a = query(2*node, st, mid, shemal, yemeen);
	pair<ll, ll> b = query(2*node + 1, mid + 1, en, shemal, yemeen);

	return {a.first + b.first, min(a.second, b.second)};
}

void update(int node, int st, int en, int shemal, int yemeen, ll val)
{
	if (st > en || st > yemeen || en < shemal) return;

	if (shemal <= st && en <= yemeen)
	{
		mn[node] += val;
		sum[node] += val;
		return;
	}

	int mid = (st+en)/2;

	update(2*node, st, mid, shemal, yemeen, val);
	update(2*node + 1, mid + 1, en, shemal, yemeen, val);

	mn[node] = min(mn[2*node], mn[2*node + 1]);
	sum[node] = sum[2*node] + sum[2*node + 1];
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n;
	cin >> n;
	rep(i, 0, n) cin >> arr[i];
	build(1, 0, n-1);
	int q;
	cin >> q;
	while(q--)
	{
		string x;
		cin >> x;
		if (x == "COUNT")
		{
			int a, b;
			cin >> a >> b;
			auto i = query(1, 0, n-1, a, b);
			cout << i.first - i.second << endl;
		}
		else if (x == "GROW")
		{
			ll val;
			int a;
			cin >> val >> a;
			update(1, 0, n-1, a, a, val);
		}
		else
		{
			ll val;
			int a;
			cin >> val >> a;
			update(1, 0, n-1, a, a, -val);
		}
	}
	return 0;
}

