#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}


struct seg_tree
{
	int mx, prefix, suffix, sum, pi, pj, si, sj, mi, mj;

	seg_tree()
	{
		mx = prefix = suffix = pi = pj = si = sj = mi = mj = sum = 0;
	}

	seg_tree(int m, int p, int s, int _s, int pp, int ppp, int ss, int sss,
			int i, int j)
	{
		mx = m, prefix = p, suffix = s;
		pi = pp, pj = ppp;
		si = ss, sj = sss;
		mi = i, mj = j;
		sum = _s;
	}
};

seg_tree tree[400004];

int arr[100001];

void merge(seg_tree & a, seg_tree b, seg_tree c)
{
	a.sum = b.sum + c.sum;

	if (b.mx < c.mx)
		a.mx = b.mx, a.mi = b.mi, a.mj = b.mj;
	else
		a.mx = c.mx, a.mi = c.mi, a.mj = c.mj;

	if (b.suffix + c.prefix < a.mx)
		a.mx = b.suffix + c.prefix, a.mi = b.si, a.mj = c.pj;

	if (b.prefix < b.sum + c.prefix)
		a.prefix = b.prefix, a.pi = b.pi, a.pj = b.pj;
	else
		a.prefix = b.sum + c.prefix, a.pi = b.pi, a.pj = c.pj;

	if (c.suffix < c.sum + b.suffix)
		a.suffix = c.suffix, a.si = c.si, a.sj = c.sj;
	else
		a.suffix = c.sum + b.suffix, a.si = b.si, a.sj = c.sj;
}

void build(int node, int st, int en)
{
	if (st > en)
		return;

	if (st == en)
	{
		tree[node] = seg_tree(arr[st], arr[st], arr[st], arr[st], st, st, st, st, st, st);
		return;
	}

	int mid = (st + en) / 2;

	build(2 * node, st, mid);
	build(2 * node + 1, mid + 1, en);

	merge(tree[node], tree[2 * node], tree[2 * node + 1]);
}

void update(int node, int st, int en, int shemal, int yemeen)
{
	if (st > en || st > yemeen || en < shemal)
		return;

	if (shemal <= st && en <= yemeen)
	{
		tree[node].mx *= -1;
		tree[node].prefix *= -1;
		tree[node].suffix *= -1;
		tree[node].sum *= -1;
		return;
	}

	int mid = (st + en) / 2;

	update(2 * node, st, mid, shemal, yemeen);
	update(2 * node + 1, mid + 1, en, shemal, yemeen);

	merge(tree[node], tree[2 * node], tree[2 * node + 1]);
}


int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n, k;
	cin >> n >> k;

	rep(i, 0, n) cin >> arr[i];

	build(1, 0, n-1);


	while(k--)
	{
		int l = tree[1].mi, j = tree[1].mj;
		erep(i, l, j) update(1, 0, n-1, i, i);
	}

	cout << tree[1].sum << endl;

	return 0;
}
