/*
    since we're maximizing array A and minimizing array B
    we're sure that the maximum so far will stay the same or will increase in array A
    similarly, the minimum so far in array B will stay the same or will decrease
    this allows us to binary search on the valid interval
    we'll use a segment tree to query on the maximums/minimums in a given range
    if our left and right ranges are valid, add them to our solution (r - l + 1) 
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

int arr[200001][2];
int tree[400002][2];

void build(int node, int st, int en)
{
	if (st > en) return;
	if (st == en)
	{
		tree[node][0] = arr[st][0];
		tree[node][1] = arr[st][1];
		return;
	}
	int mid = (st+en)/2;
	build(2*node, st, mid);
	build(2*node + 1, mid + 1, en);
	tree[node][0] = max(tree[2*node][0], tree[2*node + 1][0]);
	tree[node][1] = min(tree[2*node][1], tree[2*node + 1][1]);
}

// max, min
pii query(int node, int st, int en, int shemal, int yemeen)
{
	if (st > en || st > yemeen || en < shemal) return {-1e9, 1e9};

	if (shemal <= st && en <= yemeen) return {tree[node][0], tree[node][1]};

	int mid = (st+en)/2;

	pii a = query(2*node, st, mid, shemal, yemeen);
	pii b = query(2*node + 1, mid + 1, en, shemal, yemeen);
	return {max(a.first, b.first), min(a.second, b.second)};
}

int main()
{
	//ios_base::sync_with_stdio(0);
	//cin.tie(0);
	int n;
	cin >> n;
	rep(i, 0, n) cin >> arr[i][0];
	rep(i, 0, n) cin >> arr[i][1];
	build(1, 0, n-1);
	ll sum = 0;
	rep(i, 0, n)
	{
		int st = i, en = n-1, l = -1, r = -1;
		while(st <= en)
		{
			int mid = (st+en)/2;
			pii hoba = query(1, 0, n-1, i, mid);
			if (hoba.first > hoba.second) en = mid - 1;
			else if (hoba.first < hoba.second) st = mid + 1;
			else st = mid + 1, r = mid;
		}
		if (r != -1)
		{
			st = i, en = n-1;
			while(st <= en)
			{
				int mid = (st+en)/2;
				pii hoba = query(1, 0, n-1, i, mid);
				if (hoba.first > hoba.second) en = mid - 1;
				else if (hoba.first < hoba.second) st = mid + 1;
				else en = mid - 1, l = mid;
			}
			if (l != -1)
				sum += (r - l + 1);
		}
	}
	cout << sum << endl;
	return 0;
}

