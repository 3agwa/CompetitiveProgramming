/*
    the first thing to notice is that, if we have a range [l, r]
    to satisfy the first condition, the gcd(l, r) should equal min(l, r)
    to do so, we'll keep the minimums and gcd of ranges in a segment tree
    now, we'll binary search on the maximum valid segment
    now for each valid segment, push it in a vector and output the solution
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

const int lololey = 3e5 + 5;

int arr[lololey], mn[4 * lololey], gcd[4 * lololey];

void build(int node, int st, int en)
{
	if (st > en)
		return;

	if (st == en)
	{
		mn[node] = arr[st];
		gcd[node] = arr[st];
		return;
	}
	int mid = (st + en) / 2;
	build(2 * node, st, mid);
	build(2 * node + 1, mid + 1, en);
	gcd[node] = __gcd(gcd[2 * node], gcd[2 * node + 1]);
	mn[node] = min(mn[2 * node], mn[2 * node + 1]);
}

pii query(int node, int st, int en, int shemal, int yemeen)
{
	if (st > en || st > yemeen || en < shemal) return
	{	1e9, 0};

	if (shemal <= st && en <= yemeen) return
	{	mn[node], gcd[node]};

	int mid = (st+en)/2;

	pii a = query(2*node, st, mid, shemal, yemeen);
	pii b = query(2*node + 1, mid + 1, en, shemal, yemeen);

	return
	{	min(a.first, b.first), __gcd(a.second, b.second)};
}

int n;

bool yay(int m)
{
	rep(i, 0, n-m)
	{
		pii hoba = query(1, 0, n-1, i, i+m);
		if (hoba.first == hoba.second) return true;
	}
	return false;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	rep(i, 0, n)
		cin >> arr[i];

	build(1, 0, n-1);

	int st = 0, en = n - 1, segment = -1;
	while (st <= en)
	{
		int mid = (st + en) / 2;
		if (yay(mid))
			st = mid + 1, segment = mid;
		else
			en = mid - 1;
	}
	vi vec;
	rep(i, 0, n - segment)
	{
		pii hoba = query(1, 0, n-1, i, i + segment);
		if (hoba.first == hoba.second) vec.push_back(i+1);
	}
	cout << sz(vec) << " " << segment << endl;
	rep(i, 0, sz(vec)) cout << vec[i] << " ";


	return 0;
}

