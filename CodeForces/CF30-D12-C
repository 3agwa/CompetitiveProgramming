/*
    we'll sort the input based on the time, x, y, prob
    dp on whether or not you can go to the next item in the given moment of time
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
//#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

// t, x, y, p
vector< pair< pair<double, double>, pair<double, double>> > vec;
int n;
bool yenfa3(int a, int b)
{
	ll x = vec[a].first.second - vec[b].first.second;
	ll y = vec[a].second.first - vec[b].second.first;
	ll t = vec[a].first.first - vec[b].first.first;

	return x*x + y*y <= t*t;
}

double memo[1001];

double solve(int idx)
{
	if (memo[idx] == memo[idx]) return memo[idx];
 	double ret = vec[idx].second.second;
	rep(i, idx+1, n)
	{
		double p = vec[idx].second.second;
		if (yenfa3(idx, i)) ret = max(ret, p + solve(i));
	}

	return memo[idx] = ret;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	reset(memo, -1);
	cin >> n;
	rep(i, 0, n)
	{
		double x, y, t, p;
		cin >> x >> y >> t >> p;
		vec.push_back({{t, x}, {y, p}});
	}
	sort(all(vec));
	double ret = 0;
	//for(auto i : vec) cout << i.first.first << " " << i.first.second << " " << i.second.first << " " << i.second.second << endl;
	rep(i, 0, n)
	{
		ret = max(ret, solve(i));
	}
	cout << fixed << setprecision(9) << ret << endl;
	return 0;
}

