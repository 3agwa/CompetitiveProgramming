/*
    it's a modified knapsack problem, there are a couple of tricks when it comes to the bag size
    first trick, we don't need more than a bag with size 200, so we'll always take min(200, curr_size + gain)
    another thing since the bags could be -ve, we'll add to our bags (when memoizing) +200 to balance our bags
    in the array, the lowest possible bag count we have is -200, so we could memoize -200 as our index 0
*/
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
//#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

int n, l, k;
vd prob;
vi bag;
double memo[201][201][401];

double solve(int idx, int taken, int bgz)
{
	if (idx == n) return (taken >= l && bgz >= 0) * 1.;
	if (memo[idx][taken][bgz+200] == memo[idx][taken][bgz+200]) return memo[idx][taken][bgz+200];
	double ret = 0;
	ret = solve(idx+1, taken + 1, min(200, bgz + bag[idx]))*prob[idx] +
		  solve(idx+1, taken, bgz) * (1. - prob[idx]);
	return memo[idx][taken][bgz+200] = ret;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	reset(memo, -1);
	cin >> n >> l >> k;
	prob = vd(n), bag = vi(n);
	rep(i, 0, n) cin >> prob[i], prob[i] /= 100.0;
	rep(i, 0, n) cin >> bag[i];
	cout << fixed << setprecision(9) << solve(0, 0, k) << endl;
	return 0;
}

