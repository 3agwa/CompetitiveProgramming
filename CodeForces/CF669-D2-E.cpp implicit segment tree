#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vll vector<ll>
#define pii pair<int, int>
#define vii vector<pii>
#define vs vector<string>
#define vb vector<bool>
#define vi vector<int>
#define vd vector<double>
#define vvi vector< vector<int> >
#define vvii vector< vector< pii > >
#define ld long double
#define mapii map<int, int>
#define mapsi map<string, int>
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pie  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}


struct Node
{
	Node* l, *r;
	int sum;

	Node()
	{
		l = NULL;
		r = NULL;
		sum = 0;
	}
};

void update(Node* root, int st, int en, int idx, int val)
{
	if (st > en || st > idx || en < idx) return;

	if (st == en)
	{
		root->sum += val;
		return;
	}

	int mid = (st+en)/2;
	if (root->l == NULL) root->l = new Node();
	if (root->r == NULL) root->r = new Node();
	update(root->l, st, mid, idx, val);
	update(root->r, mid+1, en, idx, val);

	root->sum = root->l->sum + root->r->sum;
}

ll query(Node* root, int st, int en, int shemal, int yemeen)
{
	if (st > en || st > yemeen || en < shemal || root == NULL) return 0;

	if (shemal <= st && en <= yemeen) return root->sum;

	int mid = (st+en)/2;

	return query(root->l, st, mid, shemal, yemeen) + query(root->r, mid+1, en, shemal, yemeen);
}

vector< Node* > arr;

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	mapii compress;
	int t = 1;
	int n;
	cin >> n;
	vi op(n), time(n), val(n);
	rep(i, 0, n)
	{
		cin >> op[i] >> time[i] >> val[i];
		if (!compress[val[i]]) compress[val[i]] = t++;
	}

	arr = vector< Node* > (t);
	rep(i, 0, t) arr[i] = new Node();
	rep(i, 0, n)
	{
		if (op[i] == 1)
		{
			update(arr[compress[val[i]]], 0, 1e9, time[i], 1);
		}
		else if (op[i] == 2)
		{
			update(arr[compress[val[i]]], 0, 1e9, time[i], -1);
		}
		else
		{
			cout << query(arr[compress[val[i]]], 0, 1e9, 0, time[i]) << endl;
		}
	}

	return 0;
}

